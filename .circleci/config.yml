version: 2.1

executors:

  vm:
    machine:
      image: ubuntu-2404:current
    resource_class: medium
    environment:
      DEBIAN_FRONTEND: noninteractive
      XDG_CURRENT_DESKTOP: GNOME

commands:

  environment:
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt update --assume-yes
            sudo apt upgrade --assume-yes
            sudo apt install --assume-yes \
              ca-certificates \
              curl \
              git \
              ssh \
              gcc \
              gettext \
              appstream \
              desktop-file-utils \
              meson \
              flatpak \
              snapd \
              blueprint-compiler \
              libgtk-4-dev \
              libglib2.0-bin \
              libglib2.0-dev \
              libadwaita-1-dev \
              libportal-dev \
              libportal-gtk3-dev \
              libportal-gtk4-dev \
              dbus-x11 \
              ubuntu-gnome-desktop

  build_source:
    steps:
      - run:
          name: Start DBus
          command: |
            dbus-launch --auto-syntax >> $BASH_ENV
      - run:
          name: Build
          command: |
            meson setup build
            cd build
            meson compile
            sudo meson install
      - run:
          name: Set environment variable for save directory
          command: |
            echo 'export SAVE_DIR=$HOME/.local/share/mendingwall/save' >> $BASH_ENV

  build_flatpak:
    steps:
      - run:
          name: Update environment variables for Flatpak
          command: |
            flatpak --print-updated-env >> $BASH_ENV
            echo 'export XDG_DATA_DIRS' >> $BASH_ENV
      - run:
          name: Start DBus
          command: |
            dbus-launch --auto-syntax >> $BASH_ENV
      - run:
          name: Configure Flathub
          command: |
            flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
      - run:
          name: Install Flatpak Builder
          command: |
            flatpak install -y flathub org.flatpak.Builder
      - run:
          name: Build Flatpak
          command: |
            flatpak run org.flatpak.Builder --force-clean --user --install --install-deps-from=flathub --ccache --mirror-screenshots-url=https://dl.flathub.org/media/ --repo=repo builddir flatpak/org.indii.mendingwall.yaml
      - run:
          name: Create wrapper commands for mendingwall and mendingwalld
          command: |
            mkdir -p ~/bin
            printf "#!/bin/sh\n\nexec flatpak run --command=/app/bin/start-mendingwall org.indii.mendingwall \$@\n" > ~/bin/mendingwall
            printf "#!/bin/sh\n\nexec flatpak run --command=/app/bin/start-mendingwalld org.indii.mendingwall \$@\n" > ~/bin/mendingwalld
            chmod +x ~/bin/mendingwall*
      - run:
          name: Install GSettings schema to host
          command: |
            SCHEMAS_DIR=$HOME/.local/share/glib-2.0/schemas
            mkdir -p $SCHEMAS_DIR
            cp data/org.indii.mendingwall.gschema.xml $SCHEMAS_DIR
            glib-compile-schemas $SCHEMAS_DIR
      - run:
          name: Set environment variable for save directory
          command: |
            echo 'export SAVE_DIR=$HOME/.var/app/org.indii.mendingwall/data/mendingwall/save' >> $BASH_ENV

  build_snap:
    steps:
      - run:
          name: Start DBus
          command: |
            dbus-launch --auto-syntax >> $BASH_ENV
      - run:
          # see https://documentation.ubuntu.com/lxd/en/latest/howto/network_bridge_firewalld/#prevent-connectivity-issues-with-lxd-and-docker
          name: Fix Snap network issues
          command: |
            sudo iptables  -I DOCKER-USER -i lxdbr0 -j ACCEPT
            sudo ip6tables -I DOCKER-USER -i lxdbr0 -j ACCEPT
            sudo iptables  -I DOCKER-USER -o lxdbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
            sudo ip6tables -I DOCKER-USER -o lxdbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - run:
          name: Install snapcraft
          command: |
            sudo snap install --classic snapcraft
      - run:
          name: Build Snap
          command: |
            snapcraft
      - run:
          name: Install Snap
          command: |
            sudo snap install --dangerous *.snap
      - run:
          name: Create wrapper command for mendingwalld
          command: |
            mkdir -p ~/bin
            printf "#!/bin/sh\n\nexec mendingwall.mendingwalld \$@\n" > ~/bin/mendingwalld
            chmod +x ~/bin/mendingwalld
      - run:
          name: Install GSettings schema to host
          command: |
            SCHEMAS_DIR=$HOME/.local/share/glib-2.0/schemas
            mkdir -p $SCHEMAS_DIR
            cp data/org.indii.mendingwall.gschema.xml $SCHEMAS_DIR
            glib-compile-schemas $SCHEMAS_DIR
      - run:
          name: Set environment variable for save directory
          command: |
            echo 'export SAVE_DIR=$HOME/.snap/data/mendingwall/x1/.local/share' >> $BASH_ENV

  test:
    steps:
      - run:
          name: Does help work?
          command: |
            mendingwall -h
            mendingwalld -h

      - run:
          name: Is mend themes disabled by default?
          command: |
            [[ `gsettings get org.indii.mendingwall themes` == false ]] || exit 1
      - run:
          name: Enable mend themes
          command: |
            mendingwall --enable-themes --headless
      - run:
          name: Is mend themes now enabled?
          command: |
            [[ `gsettings get org.indii.mendingwall themes` == true ]] || exit 1

      - run:
          name: Is tidy menus disabled by default?
          command: |
            [[ `gsettings get org.indii.mendingwall menus` == false ]] || exit 1
      - run:
          name: Enable tidy menus
          command: |
            mendingwall --enable-menus --headless
      - run:
          name: Is tidy menus now enabled?
          command: |
            [[ `gsettings get org.indii.mendingwall menus` == true ]] || exit 1

      - run:
          name: Is daemon now running?
          command: |
            [[ `ps -C mendingwalld -o pid= | wc -l` == 1 ]] || exit 1
      - run:
          name: Are autostart files installed?
          command: |
            [[ -f ~/.config/autostart/org.indii.mendingwall.restore.desktop && \
               -f ~/.config/autostart/org.indii.mendingwall.watch.desktop && \
               -f ~/.config/plasma-workspace/env/org.indii.mendingwall.restore.sh
            ]] || exit 1

      - run:
          name: Sleep, in case daemon is just waiting for activate signal
          command: sleep 10
      - run:
          name: Is daemon still running?
          command: |
            [[ `ps -C mendingwalld -o pid= | wc -l` == 1 ]] || exit 1

      - run:
          name: Have GNOME apps been tidied?
          command: |
            [[ `ls ~/.local/share/applications/org.gnome.*.desktop | wc -l` > 0 ]] || exit 1
      - run:
          name: Have GNOME settings been saved?
          command: |
            [[ -f $SAVE_DIR/GNOME.gsettings ]] || exit 1

      - run:
          name: Touch config file
          command: |
            touch ~/.config/kwinrc
      - run:
          name: Has config file been saved?
          command: |
            sleep 2
            [[ -f $SAVE_DIR/GNOME/kwinrc ]] || exit 1

      - run:
          name: Install KDE Plasma
          command: |
            sudo apt install --assume-yes kde-standard
      - run:
          name: Have KDE apps been tidied?
          command: |
            sleep 2
            [[ `ls ~/.local/share/applications/org.kde.*.desktop | wc -l` > 0 ]] || exit 1

      - run:
          name: Set GNOME icon theme to Breeze
          command: |
            [[ `gsettings get org.gnome.desktop.interface icon-theme` != Breeze ]] || exit 1
            gsettings set org.gnome.desktop.interface icon-theme Breeze
      - run:
          name: Is GNOME saved icon theme Breeze?
          command: |
            sleep 2
            [[ `grep icon-theme $SAVE_DIR/GNOME.gsettings` == "icon-theme='Breeze'" ]] || exit 1

      - run:
          name: Disable mend themes
          command: |
            mendingwall --disable-themes --headless
      - run:
          name: Is mend themes now disabled?
          command: |
            [[ `gsettings get org.indii.mendingwall themes` == false ]] || exit 1
      - run:
          name: Is daemon still running?
          command: |
            sleep 2
            [[ `ps -C mendingwalld -o pid= | wc -l` == 1 ]] || exit 1

      - run:
          name: Disable tidy menus
          command: |
            mendingwall --disable-menus --headless
      - run:
          name: Is tidy menus now disabled?
          command: |
            [[ `gsettings get org.indii.mendingwall menus` == false ]] || exit 1
      - run:
          name: Is daemon now terminated?
          command: |
            sleep 2
            [[ `ps -C mendingwalld -o pid= | wc -l` == 0 ]] || exit 1

      - run:
          name: Delete config file
          command: |
            rm ~/.config/kwinrc
      - run:
          name: Restore theme
          command: |
            gsettings set org.indii.mendingwall themes true
            mendingwalld --restore
      - run:
          name: Does config file now exist?
          command: |
            [[ -f ~/.config/kwinrc ]] || exit 1

jobs:

  source:
    executor: vm
    steps:
      - checkout
      - environment
      - build_source
      - test

  flatpak:
    executor: vm
    steps:
      - checkout
      - environment
      - build_flatpak
      - test

  snap:
    executor: vm
    steps:
      - checkout
      - environment
      - build_snap
      - test

  deploy:
    executor: vm
    steps:
      - environment
      - run:
          name: Trigger package update
          command: |
              curl -X POST https://circleci.com/api/v2/project/gh/lawmurray/download.indii.org/pipeline \
                --header "Circle-Token: $CIRCLE_TOKEN" \
                --header "content-type: application/json" \
                --data '{"branch": "main"}'

workflows:
  all:
    jobs:
      - source
      - flatpak
      - snap
      - deploy:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
